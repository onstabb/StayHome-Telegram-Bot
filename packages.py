# -*- coding: utf-8 -*-
from dbworker import DB, db
from random import randint, random
from pickle import dump, load

prizes = {2: (15, 1, 1, 1, 0, 0),
          3: (30, 1, 1, 1, 0, 0),
          4: (60, 3, 3, 3, 1, 0),
          5: (100, 5, 5, 5, 1, 1),
          6: (150, 10, 10, 8, 2, 2),
          }


class Chances(object):

    def __init__(self):
        pass

    def paper(self):
        return randint(0, 10)

    def foods(self):
        return randint(0, 10)

    def water(self):
        return randint(0, 10)

    def medicines(self):
        chance = randint(-10, 5)
        if chance < 0:
            return 0
        else:
            return chance

    def masks(self):
        chance = randint(-15, 5)
        if chance < 0:
            return 0
        else:
            return chance

    def drugs(self):
        chance = randint(-15, 3)
        if chance < 0:
            return 0
        else:
            return chance

    async def ill(self, chat_id):
        your_chance = db.get_info(chat_id)['chance_sick']
        fortuna = round(random(), 2)
        if fortuna <= your_chance:
            return randint(60 * 5, 60 * 24)
        else:
            return 0

    async def random_event(self):
        fortuna = random()
        if fortuna <= 0.10:
            if fortuna <= 0.05:
                sub_hp = 10
                return sub_hp, f'\n_\- –ü—Ä–∏–π–¥—è –≤ —Å–≤–æ–π –¥–≤–æ—Ä, –≤ —Ç–µ–±—è —à–≤—ã—Ä–Ω—É–ª–∞—Å—å –æ—Ç–∫—Ä—ã–≤—à–∞—è—Å—è –¥–≤–µ—Ä—å\.\n\-{sub_hp} –∫ –∑–¥–æ—Ä–æ–≤—å—é\._'
            else:
                sub_hp = 5
                return sub_hp, f'\n_\- –í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ —Ç—ã –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ —Ä—É–ª–æ–Ω –±—É–º–∞–≥–∏, –∏ —É–ø–∞–ª\.\n' \
                               f'–ë—É–º–∞–≥–∞ —É–∫–∞—Ç–∏–ª–∞—Å—å, –∞ —Ç–µ–±–µ \-{sub_hp} –∫ –∑–¥–æ—Ä–æ–≤—å—é\._'
        else:
            return 0, ''


class Player:

    def __init__(self, chat_id):
        self.id = chat_id
        self.info = DB.show_user_info(self.id)
        self.nickname = self.info[2]
        self.paper = self.info[4]
        self.foods = self.info[5]
        self.water = self.info[6]
        self.medicines = self.info[7]
        self.masks = self.info[8]
        self.drugs = self.info[9]
        self.hunger = self.info[10]
        self.thirst = self.info[11]
        self.health = self.info[12]
        self.level = self.info[13]
        self.experience = self.info[14]
        self.drug = self.info[15]
        self.ill = self.info[16]
        self.exploring = self.info[17]
        self.stayhome = self.info[18]
        self.sum_storage = sum((self.paper, self.foods, self.water, self.medicines, self.masks, self.drugs))


class LevelSys(Player):

    def __init__(self, chat_id):
        super().__init__(chat_id)

    async def need_exp(self):
        exp = 150
        need_exp = exp + exp * (self.level - 1)
        return need_exp

    async def level_type(self):
        if self.level < 10:
            return '–ù–æ–≤–∏—á–æ–∫'
        elif 10 <= self.level < 25:
            return '–î–≤–æ—Ä–æ–≤–æ–π'
        elif 25 <= self.level < 50:
            return '–£–ª–∏—á–Ω—ã–π'
        else:
            return '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'

    async def storage_type(self):

        if self.sum_storage < 250:
            return '–ö–æ–º–Ω–∞—Ç–∞üö™'
        elif 250 <= self.sum_storage < 500:
            return '–ß–µ—Ä–¥–∞–∫üè°'
        elif 500 <= self.sum_storage < 1000:
            return '–°–∞—Ä–∞–πüèö'
        elif 1000 <= self.sum_storage < 5000:
            return '–ê–Ω–≥–∞—Äüè†'
        elif 5000 <= self.sum_storage < 10000:
            return '–°–∫–ª–∞–¥üè¢'
        elif 10000 <= self.sum_storage < 50000:
            return '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥üè≠'
        elif 50000 <= self.sum_storage < 250000:
            return '–ß–∞—Å—Ç–Ω—ã–π –≥–æ—Å.–æ–±—å–µ–∫—Çüèõ'
        elif 250000 <= self.sum_storage < 1000000:
            return '–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç. —Ä–µ–∑–µ—Ä–≤üèô'
        else:
            return '–ü–ª–∞–Ω–µ—Ç–Ω—ã–π —Ä–µ–∑–µ—Ä–≤üåç'

    async def new_level(self):
        need_exp = await self.need_exp()
        experience = DB.check_experience(self.id)
        if experience >= need_exp:

            DB.upd_lvl(self.id, self.experience - need_exp)
            return '\n*–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å\!* üÜô '
        else:
            return ''


class Exploring(LevelSys):

    def __init__(self, chat_id):
        super().__init__(chat_id)

    async def try_go(self):
        if self.ill > 0 and self.drug == 0:
            return f'*–¢—ã –Ω–µ –∑–¥–æ—Ä–æ–≤\!*\n_–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü—É\._'
        minutes = randint(10, 20)
        if self.exploring is None:
            DB.set_exploring(self.id, minutes)
            db.equipment(self.id, {"exp": minutes})
            if db.get_info(self.id)['masked'] is True:
                DB.use_mask(self.id)
            return f'*–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å\!*\n_–≠—Ç–æ –∑–∞–π–º—ë—Ç {minutes} –º–∏–Ω—É—Ç –≤—Ä–µ–º–µ–Ω–∏\._'
        else:
            return f'*–¢—ã —É–∂–µ –≥—É–ª—è–µ—à—å –ø–æ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è–º\!*' \
                   f'\n_–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: –æ–∫–æ–ª–æ \{self.exploring} –º–∏–Ω\._'

    async def end(self):
        chances = [
            CHANCES.paper(), CHANCES.foods(), CHANCES.water(), CHANCES.medicines(), CHANCES.masks(), CHANCES.drugs()
        ]
        if self.ill > 0:
            chances = tuple(map(lambda i: i//2, chances))
        illness = await CHANCES.ill(self.id)
        if illness != 0:
            if self.ill > illness:
                illness = self.ill
            sick = f'\n_\- –¢—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –±–æ–ª–µ–∑–Ω—å\!\n–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ\.\n' \
                   f'–ë–æ–ª–µ–∑–Ω—å –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –≥–¥–µ\-—Ç–æ {illness // 60} —á–∞—Å–æ–≤\._'
        else:
            sick = ''
            illness = self.ill
        world = await WORLD.show()
        if world['stocks'] <= 0:
            db.end_exploring(self.id)
            DB.set_exploring(self.id, 'NULL')
            return '*–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ–∫–æ–Ω—á–∏–ª–æ—Å—å\!*\n_–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –º–∏—Ä–æ–≤—ã–µ –∑–∞–ø–∞—Å—ã –ø—É—Å—Ç—É—é—Ç\!_'

        if world['stocks'] >= sum(chances):
            await WORLD.upd_stocks((-sum(chances)))
        else:
            x = world['stocks'] / sum(chances)
            chances = tuple(map(lambda i: round(i * x), chances))
            await WORLD.upd_stocks(-world['stocks'])
        event = await CHANCES.random_event()
        DB.end_exploring(self.id, chances[0], chances[1], chances[2], chances[3], chances[4], chances[5], illness,
                         event[0])
        db.end_exploring(self.id)

        return f'*–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ–∫–æ–Ω—á–∏–ª–æ—Å—å\!*\n_–¢—ã –ø–æ–ª—É—á–∏–ª:_\n`' \
               f'–ë—É–º–∞–≥–∏:        {chances[0]}üßª\n' \
               f'–ï–¥—ã:           {chances[1]}üçñ\n' \
               f'–í–æ–¥—ã:          {chances[2]}üíß\n' \
               f'–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤:  {chances[3]}üíâ\n' \
               f'–ú–∞—Å–æ–∫:         {chances[4]}üò∑\n' \
               f'–õ–µ–∫–∞—Ä—Å—Ç–≤:      {chances[5]}üíä\n`' + sick + event[1] + await self.new_level()

    async def your_chance(self):
        you = db.get_info(self.id)
        world = await WORLD.infection()
        if world < you['chance_sick'] or you['chance_sick'] <= 0.00:
            if you['masked'] is True:
                world -= 0.05
            if you['washed_hands'] is True:
                world -= 0.02
            if world <= 0:
                world = 0.01
            db.equipment(self.id, {'chance_sick': world})
            return world
        return you['chance_sick']

    async def masked(self):
        if self.masks > 0:
            upd = db.get_info(self.id)['chance_sick'] - 0.05
            if upd <= 0.01:
                upd = 0.01
            db.equipment(self.id, {'masked': True, 'chance_sick': upd})
            return '–ù–∞–¥–µ—Ç–∞ –º–∞—Å–∫–∞.'
        else:
            return '–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—Å–∫–∏!'

    async def washed_hands(self):
        if self.water >= 5 and self.medicines >= 1:
            DB.wash_hands(self.id)
            upd = db.get_info(self.id)['chance_sick'] - 0.02
            if upd <= 0.01:
                upd = 0.01
            db.equipment(self.id, {'washed_hands': True, 'chance_sick': upd})
            return '–ü–æ–º—ã—Ç—ã —Ä—É–∫–∏.'
        elif self.water < 5:
            return '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã!'
        else:
            return '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏–∏!'


class Stats(LevelSys):

    def __init__(self, chat_id):
        super().__init__(chat_id)

    async def eat(self):
        count = 10
        if self.hunger < 100 and self.foods > 0:
            if self.hunger > 90:
                count = 100-self.hunger
                DB.eating(self.id, count)
            else:
                DB.eating(self.id)
            return f'*–¢—ã –ø–æ–µ–ª –≤–∫—É—Å–Ω–æ–π –µ–¥—ã\.*\n_\+ {count} –∫ —Å—ã—Ç–æ—Å—Ç–∏\._'
        elif self.foods <= 0:
            return '_–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–¥—ã\!_'
        else:
            return '_–¢—ã –Ω–µ –≥–æ–ª–æ–¥–µ–Ω\!_'

    async def drink(self):
        count = 10
        if self.thirst < 100 and self.water > 0:
            if self.thirst > 90:
                count = 100 - self.thirst
                DB.drink(self.id, count)
            else:
                DB.drink(self.id)
            return f'*–¢—ã –≤—ã–ø–∏–ª –æ—Å–≤–µ–∂–∞—é—â–µ–π –≤–æ–¥—ã\.*\n_\+ {count} –∫ —Ç–≤–æ–µ–º—É –≤–æ–¥–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É\._'
        elif self.water <= 0:
            return '_–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã\!_'
        else:
            return '_–¢–µ–±–µ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –ø–∏—Ç—å\!_'

    async def heal(self):
        count = 5
        if self.health < 100 and self.medicines > 0:
            if self.health > 95:
                count = 100 - self.health
                DB.heal(self.id, count)
            else:
                DB.heal(self.id)
            return f'*–¢—ã –ø—Ä–∏–Ω—è–ª –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã\.*\n_\+ {count} –∫ –∑–¥–æ—Ä–æ–≤—å—é\._'
        elif self.medicines <= 0:
            return '_–ù–µ—Ç –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤\!_'
        else:
            return '_–£ —Ç–µ–±—è –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ\!_'

    async def take_medicine(self):
        if self.drug == 0 and self.drugs > 0 and self.ill > 0:
            DB.take_med(self.id)
            return '*–¢—ã –ø—Ä–∏–Ω—è–ª –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\.*\n_–î–µ–π—Å—Ç–≤–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø—Ä–æ–¥–ª–∏—Ç—Å—è 2 —á–∞—Å–∞\._'
        elif self.drugs <= 0:
            return '_–£ —Ç–µ–±—è –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤\!_'
        elif self.ill == 0:
            return '_–¢—ã –∑–¥–æ—Ä–æ–≤\! –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ\._'
        else:
            return '_–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–∂–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç\!_'


class Store(LevelSys):

    def __init__(self, chat_id):
        super().__init__(chat_id)

    async def buy_drug(self, price=50):
        if self.paper >= price:
            DB.buy_drug(self.id, price)
            return '_–ö—É–ø–ª–µ–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤\._'
        else:
            return '_–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±—É–º–∞–≥–∏\!_'

    async def try_luck(self, value, price=100):
        async def you_gave(chances):
            return f'_–¢—ã –ø–æ–ª—É—á–∏–ª:_\n`' \
                   f'üßª{chances[0]} üçñ{chances[1]} üíß{chances[2]} üíâ{chances[3]} üò∑{chances[4]} üíä{chances[5]}\n`'
        if self.paper >= price:
            DB.buy_luck_chance(self.id, price)
            if value == 1:
                return f"*–ù–æ–º–µ—Ä 1*\n_–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª_"
            elif value > 1:
                DB.you_win(self.id, prizes[value])
                return f"*–ù–æ–º–µ—Ä {value}*\n" + await you_gave(prizes[value])
        else:
            return '_–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±—É–º–∞–≥–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞\!_'


class World:

    startpoint = {'normal': 50, 'stocks': 50}

    async def stocks(self): return DB.show_users_count() * randint(50, 100)

    def __init__(self, file='situation.world'):
        self.file = file
        self.max_chance = 0.90
        self.min_chance = 0.05

    async def upd_stocks(self, change_stock):
        stocks = await self.show()
        stocks['stocks'] += change_stock
        if stocks['stocks'] < 0:
            stocks['stocks'] = 0
        with open(self.file, 'wb') as f:
            dump(stocks, f)

    async def show(self):
        try:
            with open(self.file, 'rb') as f:
                return load(f)
        except FileNotFoundError:
            with open(self.file, 'wb') as f:
                dump(self.startpoint, f)
                return self.startpoint

    async def infection(self):
        percent = (DB.who_healthy_and_walk() + DB.who_ill_and_walk()*1.5) / (DB.show_users_count())
        if percent <= 0:
            return self.min_chance
        elif percent > self.max_chance:
            return self.max_chance
        return round(percent, 2)

    async def stocks_everyday(self):
        check = await self.show()
        if (len(db) * 50) > check['stocks']:
            new_stocks = await self.stocks()
            await self.upd_stocks(new_stocks)


WORLD = World()
CHANCES = Chances()

if __name__ == '__main__':
    pass

