# -*- coding: utf-8 -*-
import packages
from time import strftime
from dbworker import DB


async def str_num(num, space, unit='m'):
    string = str(num)
    if len(string) < space:
        return ' ' * (space - len(string)) + string
    elif len(string) == space:
        return string
    else:
        number = string[:(len(string)-space)] + unit
        spaces = " " * (space - len(number))
        return spaces + number


async def str_num_2(num, space, unit="..."):
    string = str(num)
    if len(string) < space + 3:
        return string + ' ' * ((space + 3) - len(string))
    elif len(string) == space + 3:
        return string
    else:
        return string[:space] + unit


async def main(player):
    if player.ill <= 0:
        ill = '\- –¢—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤\n'
    else:
        ill = f'\- –¢—ã –±–æ–ª–µ–µ—à—å, –¥–æ –∫–æ–Ω—Ü–∞\n–±–æ–ª–µ–∑–Ω–∏: {player.ill//60} —á\.\n'
    if player.drug <= 0:
        med = ''
    else:
        med = f'\- –î–µ–π—Å—Ç–≤—É–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\n'
    if player.health <= 0:
        hp = '\- –¢—ã –ø—Ä–∏—Å–º–µ—Ä—Ç–∏\!\n'
    else:
        hp = ''
    if player.exploring is None:
        exp = ''
    else:
        exp = f'\- –¢—ã –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–µ\n'
    if player.hunger > 0:
        hungry = ''
    else:
        hungry = '\- –¢—ã –≥–æ–ª–æ–¥–∞–µ—à—å\n'
    if player.thirst > 0:
        thirst = ''
    else:
        thirst = '\- –¢–µ–±—è –º—É—á–∞–µ—Ç –∂–∞–∂–¥–∞\n'
    return f'*{player.nickname}*\n`' \
           f'–£—Ä–æ–≤–µ–Ω—å:    {await str_num(player.level, 6)}‚ÑπÔ∏è\n' \
           f'–û–ø—ã—Ç:    {await str_num(player.experience, 5, "k")}/{await str_num(await player.need_exp(), 3, "k")}‚≠êÔ∏è\n' \
           f'–¢–∏–ø:       {await str_num(await player.level_type(), 9)}\n' \
           f'–í—Ä–µ–º—è:      {strftime("%H:%M:%S")}\n' \
           f'–ì–æ–ª–æ–¥:      {await str_num(player.hunger, 6)}üçΩ\n' \
           f'–ñ–∞–∂–¥–∞:      {await str_num(player.thirst, 6)}üí¶\n' \
           f'–ó–¥–æ—Ä–æ–≤—å–µ:   {await str_num(player.health, 6)}‚ô•Ô∏è`\n\n' \
           f'_{ill}{med}{hp}{hungry}{thirst}{exp}_'


async def outside(exp):
    stocks = await packages.WORLD.show()
    equipment = ''
    masked = ""
    hands = ""
    if exp.exploring is None:
        exploring = ''
        if packages.db.get_info(exp.id)['masked'] is True:
            equipment = "–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: "
            masked = '- –ú–∞—Å–∫–∞\n'
        if packages.db.get_info(exp.id)['washed_hands'] is True:
            equipment = "–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n"
            hands = '- –ü–æ–º—ã—Ç—ã–µ —Ä—É–∫–∏\n'
    else:
        exploring = f'–ò–¥—ë—Ç –ø—Ä–æ–≥—É–ª–∫–∞.\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {exp.exploring} –º–∏–Ω.'

    return f'*–ê –Ω–∞ —É–ª–∏—Ü–µ:*\n`' \
           f'–®–∞–Ω—Å –Ω–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ:{await str_num(round(await packages.WORLD.infection() * 100, 2), 6)}` _%_\n`' \
           f'–ú–∏—Ä–æ–≤—ã–µ –∑–∞–ø–∞—Å—ã:   {await str_num(stocks["stocks"], 6)}üì¶\n\n' \
           f'–í –Ω–∞–ª–∏—á–∏–∏ –º–∞—Å–æ–∫:  {await str_num(exp.masks, 6)}üò∑\n' \
           f'–¢–≤–æ–∏ —à–∞–Ω—Å—ã:       {await str_num(round(await exp.your_chance() * 100, 2), 6)}` _%_\n`' \
           f'{exploring}{equipment}{masked}{hands}`'

world_info = '*–ù–∞ —É–ª–∏—Ü–µ –Ω–µ –≤—Å–µ —Ç–∞–∫ —Å–≤–µ—Ç–ª–æ, –¥–∞ —Ä–∞–¥—É–∂–Ω–æ\.*\n' \
             '\- –ö–∞–∂–¥–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç _–æ—Ç 10 –¥–æ 20 –º–∏–Ω—É—Ç_ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è ' \
             '—à–∞–Ω—Å–æ–º –∑–∞—Ä–∞–∑–∏—Ç—Å—è —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏—Ä–æ–≤—ã—Ö –∑–∞–ø–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏\.\n' \
             '\- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç—ã –º–æ–∂–µ—à—å —Ç–æ–ª—å–∫–æ –±—É–¥—É—á–∏ –∑–¥–æ—Ä–æ–≤—ã–º, –∏–ª–∏ –ø—Ä–∏–Ω—è–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\. –û–ø—ã—Ç –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ –∫–∞–∂–¥—É—é ' \
             '–≤—ã–ª–∞–∑–∫—É —Å —É—Å–ø–µ—à–Ω—ã–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ–º —á–µ–≥–æ\-–Ω–∏–±—É–¥—å –∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –µ—ë –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è\.\n' \
             '\- –®–∞–Ω—Å –∑–∞—Ä–∞–∑–∏—Ç—å—Å—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–µ –æ—Ç –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–æ—Ç–µ\.' \
             '–¢–µ, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª–µ—é—Ç, –ø–æ–≤—ã—à–∞—é—Ç —à–∞–Ω—Å –Ω–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ\. –®–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç _–ø—Ä–µ–≤—ã—à–∞—Ç—å 90 –∏ –±—ã—Ç—å –º–µ–Ω—å—à–µ 1\-–≥–æ %_\.\n' \
             '\- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∞—Å–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞\. –í —Å—Ä–µ–¥–Ω–µ–º, _75 –Ω–∞ –∫–∞–∂–¥–æ–≥–æ_\. ' \
             '–ï—Å–ª–∏ –º–∏—Ä–æ–≤—ã—Ö –∑–∞–ø–∞—Å–æ–≤ –º–µ–Ω—å—à–µ —Å—É–º–º—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞ –∫–∞–∂–¥–æ–≥–æ, –∫ –Ω–∏–º –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –Ω–∞ ' \
             '—Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å\.'


async def storage(your):
    stayhomezero = ''
    if your.stayhome == 0:
        stayhomezero = '–û—Ç—Å—á—ë—Ç –ø–æ–π–¥—ë—Ç —Å–æ –≤—Ç–æ—Ä–æ–≥–æ\n—É—Ä–æ–≤–Ω—è'
    return f'*–¢–≤–æ—ë —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:*\n`' \
           f'–¢–∏–ø:{await str_num(await your.storage_type(), 21)}\n' \
           f'–°–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å:     {await str_num(your.sum_storage, 6)}üì¶\n\n' \
           f'–¢—É–∞–ª–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞: {await str_num(your.paper, 6)}üßª\n' \
           f'–ü—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è:   {await str_num(your.foods, 6)}üçñ\n' \
           f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã:  {await str_num(your.water, 6)}üíß\n' \
           f'–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤:     {await str_num(your.medicines, 6)}üíâ\n' \
           f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å–æ–∫: {await str_num(your.masks, 6)}üò∑\n' \
           f'–ö–æ–ª-–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤:  {await str_num(your.drugs, 6)}üíä\n\n' \
           f'–í—Ä–µ–º–µ–Ω–∏ –¥–æ–º–∞:     {await str_num(your.stayhome, 6)}üïë\n' \
           f'{stayhomezero}\n`'


store_1 = "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–∞–Ω–¥–µ–º–∏—á–µ—Å–∫–∏–π –ú–∞–≥–∞–∑\!*"
store_2 = "_–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ç–∞—Ä–∏—Ç—å—Å—è –Ω—É–∂–Ω—ã–º –¥–æ–±—Ä–æ–º:_"

MONO = "`"
smile = "üîÖ"


async def statistics_bot():
    return f'*–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\.*\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:  {DB.show_users_count()}\n'


async def statistics_storage():
    show = DB.top_storage()

    text = '*üì¶–ù–∞–∏–±–æ–ª—å—à–∏–µ –∑–∞–ø–∞—Å—ã:*\n' + MONO  + "\n"
    for i in show:

        text += f"{smile}{await str_num_2(i[0], 6)}{await str_num_2(i[1], 12)}\n"
    return text + MONO


async def statistics_stayhome():
    show = DB.top_stayhome()
    text = '*üïë–ù–∞–∏–¥–æ–ª—å—à–µ –¥–æ–º–∞:*\n' + MONO + "\n"
    for i in show:
        text += f"{smile}{await str_num_2(i[0], 6)}{await str_num_2(i[1], 12)}\n"
    return text + MONO


async def lucker():
    return "*–õ–∞–∫–∏ –î–∞–π—Å\!*\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∞—Å–æ–≤, –±—Ä–æ—Å–∏–≤ —Å–≤–æ–π –∫—É–±–∏–∫\!\n" \
           "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞: 100üßª\n\n" \
           "_–¢–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:_\n\n" \
           "`–ù–æ–º–µ—Ä 1:\n" \
           "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã\n" \
           "–ù–æ–º–µ—Ä 2:\nüßª15   üçñ1  üíß1  üíâ1  üò∑0 üíä0\n" \
           "–ù–æ–º–µ—Ä 3:\nüßª30  üçñ1  üíß1  üíâ1  üò∑0 üíä0\n" \
           "–ù–æ–º–µ—Ä 4:\nüßª60  üçñ3  üíß3  üíâ3  üò∑1 üíä0\n" \
           "–ù–æ–º–µ—Ä 5:\nüßª100  üçñ5  üíß5  üíâ5  üò∑1 üíä1\n" \
           "–ù–æ–º–µ—Ä 6:\nüßª150 üçñ10 üíß10 üíâ8  üò∑2 üíä2\n`\n" \
           "_–ë—Ä–æ—Å–∞–π –∫—É–±–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é —É–¥–∞—á—É\!\n" \
           "\(–ß—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –æ—Ç–ø—Ä–∞–≤—å üé≤\)_"
